(* LMTagScript Grammar - Extended Backus-Naur Form *)

(* Basic Elements *)
program = {statement};
statement = task_statement | action_statement | goal_statement | class_definition | function_definition | api_call | if_statement | loop_statement | error_handling | llm_reference;

(* TAG Core *)
task_statement = "TASK:" string_literal;
action_statement = "ACTION:" string_literal;
goal_statement = "GOAL:" string_literal;

(* Classes and Functions *)
class_definition = "CLASS" identifier class_body;
class_body = "{" {class_member} "}";
class_member = field_declaration | method_declaration;
field_declaration = identifier ":" type_annotation;
method_declaration = "DEFINE" "FUNCTION" identifier "(" parameter_list ")" function_body;
parameter_list = [identifier {"," identifier}];
function_body = "{" {statement} "}";

(* Function Calls *)
function_call = "CALL" identifier "(" argument_list ")";
argument_list = [expression {"," expression}];

(* API Integration *)
api_call = "CALL" "API" identifier "." identifier ["WITH" json_object];
json_object = "{" [json_pair {"," json_pair}] "}";
json_pair = string_literal ":" expression;

(* External Connections *)
connection = "CONNECT" "TO" identifier "AS" identifier connection_config;
connection_config = "{" connection_property {"," connection_property} "}";
connection_property = string_literal ":" (string_literal | env_call);
env_call = "ENV(" string_literal ")";

(* Control Flow *)
if_statement = "IF" condition "THEN" statement_block ["ELSE" statement_block];
condition = expression comparison_operator expression;
comparison_operator = "=" | "!=" | "<" | ">" | "<=" | ">=";
statement_block = statement | "{" {statement} "}";

loop_statement = "FOR" "EACH" identifier "IN" expression "DO" statement_block;
loop_guard = "LOOPGUARD" "{" loop_config "}";
loop_config = "max_depth:" number "," "allow_repeat:" boolean;

(* Error Handling *)
error_handling = "ON" "ERROR" statement_block;

(* LLM References - NEW *)
llm_reference = "@" llm_resource [llm_parameters];
llm_resource = llm_tool | llm_file | llm_project | llm_database;
llm_tool = "tool:" identifier;
llm_file = "file:" file_path;
llm_project = "project:" project_identifier;
llm_database = "db:" database_identifier;
llm_parameters = "{" parameter_assignment {"," parameter_assignment} "}";
parameter_assignment = identifier ":" expression;
file_path = string_literal;
project_identifier = identifier;
database_identifier = identifier;

(* Data Types *)
type_annotation = "string" | "int" | "float" | "bool" | "array" | "object";
expression = literal | identifier | function_call | llm_reference;
literal = string_literal | number | boolean;
string_literal = '"' {character} '"';
number = integer | float;
integer = digit {digit};
float = integer "." integer;
boolean = "true" | "false";

(* Identifiers *)
identifier = letter {letter | digit};
letter = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" | "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" | "_";
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";
character = letter | digit | " " | "!" | "#" | "$" | "%" | "&" | "'" | "(" | ")" | "*" | "+" | "," | "-" | "." | "/" | ":" | ";" | "<" | "=" | ">" | "?" | "@" | "[" | "\" | "]" | "^" | "_" | "`" | "{" | "|" | "}" | "~";

(* Comments *)
comment = "#" {character} newline;
newline = ? ASCII 10 ?;
